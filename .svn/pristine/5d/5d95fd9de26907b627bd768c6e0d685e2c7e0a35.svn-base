/*
 * File: app/view/pnlMuestras.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('plasma.view.pnlMuestras', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.pnlmuestras',

    requires: [
        'plasma.view.pnlMuestrasViewModel',
        'plasma.view.pnlMuestrasViewController',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.grid.plugin.RowEditing',
        'Ext.toolbar.Paging'
    ],

    controller: 'pnlmuestras',
    viewModel: {
        type: 'pnlmuestras'
    },
    layout: 'fit',
    title: 'Material de Referencia PEED',

    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            items: [
                {
                    xtype: 'button',
                    id: 'btnNuevoMuestra',
                    iconAlign: 'right',
                    iconCls: 'x-fa fa-plus',
                    text: 'Nuevo',
                    listeners: {
                        click: 'onBtnNuevoMuestraClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnEliminarMuestra',
                    iconAlign: 'right',
                    iconCls: 'x-fa fa-trash',
                    text: 'Eliminar',
                    listeners: {
                        click: 'onBtnEliminarMuestraClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnImprimir',
                    iconAlign: 'right',
                    iconCls: 'x-fa fa-share-square-o',
                    text: 'Imprimir',
                    listeners: {
                        click: 'onBtnImprimirClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            id: 'grdMuestras',
            title: '',
            forceFit: true,
            store: 'Muestra',
            viewConfig: {
                listeners: {
                    itemdblclick: 'onTableItemDblClick'
                }
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'URBS'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.institucion;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            return descripcion;
                        }
                        else
                        return null;
                    },
                    dataIndex: 'institucion',
                    text: 'InstituciÃ³n',
                    editor: {
                        xtype: 'combobox',
                        id: 'cbInsitucion',
                        editable: false,
                        displayField: 'nombre',
                        queryMode: 'local',
                        store: 'Institucion',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.marcador;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            return descripcion;
                        }
                        else
                        return null;
                    },
                    hidden: true,
                    dataIndex: 'marcador',
                    text: 'Marcador',
                    editor: {
                        xtype: 'combobox',
                        id: 'cbMarcador',
                        editable: false,
                        displayField: 'nombre',
                        queryMode: 'local',
                        store: 'Marcador',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.situacion;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            return descripcion;
                        }
                        else
                        return null;
                    },
                    dataIndex: 'situacion',
                    text: 'Situacion',
                    editor: {
                        xtype: 'combobox',
                        id: 'cbSituacion',
                        editable: false,
                        displayField: 'descripcion',
                        queryMode: 'local',
                        store: 'Tipo_situacion',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.estatus;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            return descripcion;
                        }
                        else
                        return null;
                    },
                    dataIndex: 'estatus',
                    text: 'Status',
                    editor: {
                        xtype: 'combobox',
                        id: 'cbEstatus',
                        editable: false,
                        displayField: 'descripcion',
                        queryMode: 'local',
                        store: 'Status',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'volumen',
                    text: 'Volumen'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'estado_plasma',
                    text: 'Estado Plasma'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'estado_suero',
                    text: 'Estado Suero'
                }
            ],
            plugins: [
                {
                    ptype: 'rowediting'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'cbCodigoB',
                            fieldLabel: '',
                            emptyText: 'URBS',
                            enableKeyEvents: true,
                            hideTrigger: true,
                            listeners: {
                                change: 'onCbCodigoBChange'
                            }
                        },
                        {
                            xtype: 'combobox',
                            id: 'cbEstadoB',
                            margin: '0 0 0 20',
                            fieldLabel: 'Estado',
                            labelWidth: 50,
                            editable: false,
                            displayField: 'descripcion',
                            queryMode: 'local',
                            store: 'Status',
                            valueField: 'id',
                            listeners: {
                                select: 'onCbEstadoBSelect'
                            }
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'Muestra'
                }
            ]
        }
    ]

});